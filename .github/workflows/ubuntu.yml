name: test on ubuntu

on: push
#on:
#  push:
 #   branches: ["main", "second", "eigen_test"]
  #pull_request:
   # branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  Eigen3_DIR: ${{github.workspace}}/eigen-3.3.9/
jobs:
  ubuntu_test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.1
        id: install-boost
        with:
      # REQUIRED: Specify the required boost version
      # A list of supported versions can be found here:
      # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          boost_version: 1.71.0

      # NOTE: If a boost version matching all requirements cannot be found,
      # this build step will fail

      - name:  try restore cache of Eigen
        id: cache-eigen-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{env.Eigen3_DIR}}
          key: ${{ runner.os }}-eigen

      - name: DL and install Eigen
        if: steps.cache-eigen-restore.outputs.cache-hit != 'true'
        run: |
          wget https://gitlab.com/libeigen/eigen/-/archive/3.3.9/eigen-3.3.9.zip
          unzip eigen-3.3.9.zip 
          cd eigen-3.3.9
          cmake -B  ${{env.Eigen3_DIR}}/build -S .
      
      - name: Save eigen
        id: cache-eigen-save
        uses: actions/cache/save@v3
        with:
          path: ${{env.Eigen3_DIR}}
          key: ${{ steps.cache-eigen-restore.outputs.cache-primary-key }}


      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DEigen3_DIR=${{env.Eigen3_DIR}}/build
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}


      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./greet_main
